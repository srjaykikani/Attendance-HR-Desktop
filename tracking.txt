ATTENDANCE HR DESKTOP
│
├── .vscode
│
├── app
│
├── dist
│
├── main
│   ├── helpers
│   │   ├── create-window.ts
│   │   ├── index.ts
│   │
│   ├── background.ts
│   ├── localStore.ts
│   ├── preload.ts
│
├── node_modules
│
├── renderer
│   ├── .next
│   ├── components
│   │   ├── ui
│   │   │   ├── AttendanceHistory.tsx
│   │   │   ├── ClockInOut.tsx
│   │   │   ├── Dashboard.tsx
│   │   │   ├── ScheduleViewer.tsx
│   │   │   ├── SignIn.tsx
│   │   │   ├── TimeOffRequest.tsx
│   │
│   ├── pages
│   │   ├── _app.tsx
│   │   ├── home.tsx
│   │   ├── next.tsx
│
├── public
│
├── styles
│   ├── globals.css
│
├── utils
│   ├── offlineQueue.ts
│   ├── sync.ts
│
├── next-env.d.ts
├── next.config.js
├── postcss.config.js
├── preload.d.ts
├── tailwind.config.js
├── tsconfig.json
│
├── resources
│   ├── icon.icns
│   ├── icon.ico
│
├── .gitattributes
├── .gitignore
├── electron-builder.yml
├── package-lock.json
├── package.json
├── README.md
├── tsconfig.json
├── yarn.lock








ATTENDANCE HR DESKTOP
│
├── .vscode
│
├── app
│
├── dist
│
├── main
│   ├── helpers
│   │   ├── create-window.ts
import {
  screen,
  BrowserWindow,
  BrowserWindowConstructorOptions,
  Rectangle,
} from 'electron'
import Store from 'electron-store'

export const createWindow = (
  windowName: string,
  options: BrowserWindowConstructorOptions
): BrowserWindow => {
  const key = 'window-state'
  const name = `window-state-${windowName}`
  const store = new Store<Rectangle>({ name })
  const defaultSize = {
    width: options.width,
    height: options.height,
  }
  let state = {}

  const restore = () => store.get(key, defaultSize)

  const getCurrentPosition = () => {
    const position = win.getPosition()
    const size = win.getSize()
    return {
      x: position[0],
      y: position[1],
      width: size[0],
      height: size[1],
    }
  }

  const windowWithinBounds = (windowState, bounds) => {
    return (
      windowState.x >= bounds.x &&
      windowState.y >= bounds.y &&
      windowState.x + windowState.width <= bounds.x + bounds.width &&
      windowState.y + windowState.height <= bounds.y + bounds.height
    )
  }

  const resetToDefaults = () => {
    const bounds = screen.getPrimaryDisplay().bounds
    return Object.assign({}, defaultSize, {
      x: (bounds.width - defaultSize.width) / 2,
      y: (bounds.height - defaultSize.height) / 2,
    })
  }

  const ensureVisibleOnSomeDisplay = (windowState) => {
    const visible = screen.getAllDisplays().some((display) => {
      return windowWithinBounds(windowState, display.bounds)
    })
    if (!visible) {
      // Window is partially or fully not visible now.
      // Reset it to safe defaults.
      return resetToDefaults()
    }
    return windowState
  }

  const saveState = () => {
    if (!win.isMinimized() && !win.isMaximized()) {
      Object.assign(state, getCurrentPosition())
    }
    store.set(key, state)
  }

  state = ensureVisibleOnSomeDisplay(restore())

  const win = new BrowserWindow({
    ...state,
    ...options,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      ...options.webPreferences,
    },
  })

  win.on('close', saveState)

  return win
}

│   │   ├── index.ts
export * from './create-window'

│   │
│   ├── background.ts
// main/background.ts
import { app, ipcMain, BrowserWindow, powerMonitor } from 'electron';
import serve from 'electron-serve';
import Store from 'electron-store';
import path from 'path';
import axios from 'axios';
import { SyncManager } from './SyncManager';
import { encrypt, decrypt } from './encryptionUtils';
import { ActivityLog, DailyActivity, User, ActivityData } from './types';
import { initializeRabbitMQ, sendAttendanceUpdate } from './rabbitmq';

const isProd: boolean = process.env.NODE_ENV === 'production';

if (isProd) {
  serve({ directory: 'app' });
} else {
  app.setPath('userData', `${app.getPath('userData')} (development)`);
}

const store = new Store<{
  'auth-token'?: string;
  user?: string;
  activityData: string;
}>();

let mainWindow: BrowserWindow | null = null;
let lastActivityTime = Date.now();
let isCurrentlyActive = false;
let currentSessionStart = 0;
let todayFirstLogin = 0;
let lastUpdateTime = Date.now();
let lastIdleStartTime = 0;
const idleThreshold = 300000; // 5 minutes in milliseconds
const checkInterval = 5000; // Check every 5 seconds

const PAYLOAD_CMS_URL = process.env.NEXT_PUBLIC_SERVER_URL || 'http://localhost:3000';

const createWindow = async () => {
  mainWindow = new BrowserWindow({
    width: 1000,
    height: 600,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js'),
    },
  });

  if (isProd) {
    await mainWindow.loadURL('app://./home');
  } else {
    const port = process.argv[2];
    await mainWindow.loadURL(`http://localhost:${port}/home`);
    mainWindow.webContents.openDevTools();
  }

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
};

function setupActivityTracking() {
  const updateActivity = () => {
    try {
      const now = Date.now();
      const idleTimeSeconds = powerMonitor.getSystemIdleTime();
      const isIdle = idleTimeSeconds * 1000 >= idleThreshold;

      if (isIdle && isCurrentlyActive) {
        // Transition to idle
        logActivity('logout', now);
        isCurrentlyActive = false;
        lastIdleStartTime = now - (idleTimeSeconds * 1000);
      } else if (!isIdle && !isCurrentlyActive) {
        // Transition to active
        logActivity('login', now);
        isCurrentlyActive = true;
        currentSessionStart = now;
      }

      updateCurrentSessionTime(now, isIdle, idleTimeSeconds);
    } catch (error) {
      console.error('Error in updateActivity:', error);
    }
  };

  powerMonitor.on('unlock-screen', updateActivity);
  powerMonitor.on('lock-screen', updateActivity);
  powerMonitor.on('resume', updateActivity);
  powerMonitor.on('suspend', updateActivity);

  setInterval(updateActivity, checkInterval);

  // Sync data every 15 minutes
  setInterval(() => {
    SyncManager.batchSync();
  }, 900000);
}

function getActivityData(): ActivityData {
  const encryptedData = store.get('activityData', encrypt({}));
  const decryptedData = decrypt(encryptedData);
  return decryptedData || {};
}

function saveActivityData(data: ActivityData) {
  store.set('activityData', encrypt(data));
}

function logActivity(type: 'login' | 'logout', timestamp: number) {
  const currentDate = new Date(timestamp).toISOString().split('T')[0];
  const savedData = getActivityData();
  
  if (!savedData[currentDate]) {
    savedData[currentDate] = {
      date: currentDate,
      firstLogin: timestamp,
      logActivity: [],
      grossTime: 0,
      effectiveTime: 0,
      idleTime: 0,
    };
  }
  
  const todayData = savedData[currentDate];
  
  if (type === 'login') {
    todayData.logActivity.push({ logIn: timestamp });
    if (todayData.firstLogin === 0 || timestamp < todayData.firstLogin) {
      todayData.firstLogin = timestamp;
      todayFirstLogin = timestamp;
    }
    currentSessionStart = timestamp;
    isCurrentlyActive = true;
  } else if (type === 'logout') {
    const lastLog = todayData.logActivity[todayData.logActivity.length - 1];
    if (lastLog && !lastLog.logOut) {
      lastLog.logOut = timestamp;
    }
    isCurrentlyActive = false;
  }
  
  saveActivityData(savedData);

  // Send update to RabbitMQ
  const user = getUser();
  if (user) {
    sendAttendanceUpdate(user.id, { type, timestamp, currentDate, todayData });
  }

  // Queue activity data for syncing
  SyncManager.queueActivityData(todayData);
}

function getUser(): User | null {
  const encryptedUser = store.get('user');
  if (!encryptedUser) return null;
  
  try {
    const decryptedUser = decrypt(encryptedUser);
    return typeof decryptedUser === 'string' ? JSON.parse(decryptedUser) : decryptedUser;
  } catch (error) {
    console.error('Error parsing user data:', error);
    return null;
  }
}

function updateCurrentSessionTime(now: number, isIdle: boolean, idleTimeSeconds: number) {
  const currentDate = new Date(now).toISOString().split('T')[0];
  const savedData = getActivityData();
  const todayData = savedData[currentDate] || { 
    date: currentDate,
    firstLogin: now,
    logActivity: [],
    grossTime: 0,
    effectiveTime: 0,
    idleTime: 0,
  };

  if (todayFirstLogin === 0) {
    todayFirstLogin = todayData.firstLogin;
  }

  const timeSinceLastUpdate = now - lastUpdateTime;

  if (isIdle) {
    const idleDuration = Math.min(timeSinceLastUpdate, idleTimeSeconds * 1000);
    todayData.idleTime += idleDuration;
    todayData.effectiveTime += timeSinceLastUpdate - idleDuration;
  } else {
    todayData.effectiveTime += timeSinceLastUpdate;
  }

  todayData.grossTime = now - todayFirstLogin;

  savedData[currentDate] = todayData;
  saveActivityData(savedData);
  lastUpdateTime = now;

  if (mainWindow) {
    mainWindow.webContents.send('update-session-time', {
      grossTime: todayData.grossTime,
      effectiveTime: todayData.effectiveTime,
      idleTime: todayData.idleTime
    });
  }
}

app.on('ready', async () => {
  await initializeRabbitMQ();
  createWindow();
  setupActivityTracking();
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (mainWindow === null) {
    createWindow();
  }
});

// IPC Handlers
ipcMain.handle('sign-in', async (_, { email, password }) => {
  try {
    const response = await axios.post(`${PAYLOAD_CMS_URL}/api/users/login`, {
      email,
      password,
    });
    
    if (response.data && response.data.user) {
      await store.set('auth-token', response.data.token);
      await store.set('user', encrypt(response.data.user));
      return { success: true, user: response.data.user };
    } else {
      throw new Error('Invalid response from server');
    }
  } catch (error) {
    console.error('Sign-in error:', error);
    if (axios.isAxiosError(error) && error.response) {
      return { 
        success: false, 
        error: error.response.data?.message || 'An error occurred during sign-in'
      };
    }
    return { success: false, error: 'An error occurred during sign-in' };
  }
});

ipcMain.handle('get-token', () => {
  return store.get('auth-token');
});

ipcMain.handle('get-user', () => {
  const encryptedUser = store.get('user');
  return encryptedUser ? decrypt(encryptedUser) : null;
});

ipcMain.handle('logout', () => {
  store.delete('auth-token');
  store.delete('user');
  return { success: true };
});

ipcMain.handle('check-auth', async () => {
  const token = store.get('auth-token');
  if (!token) {
    return { isAuthenticated: false };
  }

  try {
    const response = await axios.get(`${PAYLOAD_CMS_URL}/api/users/me`, {
      headers: {
        Authorization: `JWT ${token}`,
      },
    });

    if (response.data && response.data.user) {
      return { isAuthenticated: true, user: response.data.user };
    } else {
      store.delete('auth-token');
      store.delete('user');
      return { isAuthenticated: false };
    }
  } catch (error) {
    console.error('Auth check error:', error);
    store.delete('auth-token');
    store.delete('user');
    return { isAuthenticated: false };
  }
});

ipcMain.handle('get-activity-data', () => {
  return getActivityData();
});

ipcMain.handle('get-current-session-time', () => {
  const now = Date.now();
  const idleTimeSeconds = powerMonitor.getSystemIdleTime();
  const isIdle = idleTimeSeconds * 1000 >= idleThreshold;
  updateCurrentSessionTime(now, isIdle, idleTimeSeconds);
  
  const currentDate = new Date(now).toISOString().split('T')[0];
  const savedData = getActivityData();
  const todayData = savedData[currentDate] || { 
    date: currentDate,
    firstLogin: now,
    logActivity: [],
    grossTime: 0,
    effectiveTime: 0,
    idleTime: 0,
  };

  return {
    grossTime: todayData.grossTime,
    effectiveTime: todayData.effectiveTime,
    idleTime: todayData.idleTime
  };
});

// New IPC handler for manual sync
ipcMain.handle('manual-sync', async () => {
  try {
    await SyncManager.processQueue();
    return { success: true };
  } catch (error) {
    console.error('Manual sync error:', error);
    return { success: false, error: 'An error occurred during manual sync' };
  }
});

│   ├── preload.ts
import { contextBridge, ipcRenderer } from 'electron';

contextBridge.exposeInMainWorld('ipc', {
  invoke: (channel: string, data: any) => ipcRenderer.invoke(channel, data),
});
│
├── node_modules
│
├── renderer
│   ├── .next
│   ├── components
│   │   ├── ui
│   │   │   ├── AttendanceHistory.tsx
import { Table } from "./ui/table"

const mockAttendanceData = [
  { date: '2024-03-01', clockIn: '09:00 AM', clockOut: '05:00 PM' },
  { date: '2024-03-02', clockIn: '08:55 AM', clockOut: '05:05 PM' },
  { date: '2024-03-03', clockIn: '09:02 AM', clockOut: '04:58 PM' },
]

export default function AttendanceHistory() {
  return (
    <Table
      headers={['Date', 'Clock In', 'Clock Out']}
      rows={mockAttendanceData.map(record => [record.date, record.clockIn, record.clockOut])}
    />
  )
}
│   │   │   ├── ClockInOut.tsx
import { useState, useEffect } from 'react'
import { Button } from "./ui/button"
import { Clock } from 'lucide-react'

export default function ClockInOut() {
  const [isClockedIn, setIsClockedIn] = useState(false)
  const [currentTime, setCurrentTime] = useState(new Date())

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000)
    return () => clearInterval(timer)
  }, [])

  const handleClockInOut = () => {
    setIsClockedIn(!isClockedIn)
  }

  return (
    <div className="flex flex-col items-center">
      <p className="text-2xl font-bold mb-4">{currentTime.toLocaleTimeString()}</p>
      <Button
        onClick={handleClockInOut}
        variant={isClockedIn ? "destructive" : "default"}
      >
        <Clock className="mr-2 h-4 w-4" />
        {isClockedIn ? 'Clock Out' : 'Clock In'}
      </Button>
    </div>
  )
}
│   │   │   ├── Dashboard.tsx
import React from 'react';
import { Button } from "./ui/button";
// Define the User interface based on the structure from your Payload CMS
interface User {
  id: string;
  email: string;
  role: string;
  department?: string;
  manager?: string | { id: string; email: string };
  managerLead?: string | { id: string; email: string };
  salesLead?: string | { id: string; email: string };
  ceo?: string | { id: string; email: string };
}

interface DashboardProps {
  user: User;
  onSignOut: () => Promise<void>;
}

interface ManagerInfo {
  id: string;
  email: string;
}
interface DashboardProps {
  user: User;
  onSignOut: () => Promise<void>;
}

export default function Dashboard({ user, onSignOut }: DashboardProps) {
  const renderUserInfo = () => {
    return (
      <div className="bg-white shadow overflow-hidden sm:rounded-lg mt-6">
        <div className="px-4 py-5 sm:px-6">
          <h3 className="text-lg leading-6 font-medium text-gray-900">User Information</h3>
        </div>
        <div className="border-t border-gray-200">
          <dl>
            <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Email</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.email}</dd>
            </div>
            <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
              <dt className="text-sm font-medium text-gray-500">Role</dt>
              <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.role}</dd>
            </div>
            {user.department && (
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Department</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user.department}</dd>
              </div>
            )}
            {user.manager && (
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Manager</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  {typeof user.manager === 'string' ? user.manager : user.manager.email}
                </dd>
              </div>
            )}
            {user.managerLead && (
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Manager Lead</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  {typeof user.managerLead === 'string' ? user.managerLead : user.managerLead.email}
                </dd>
              </div>
            )}
            {user.salesLead && (
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Sales Lead</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  {typeof user.salesLead === 'string' ? user.salesLead : user.salesLead.email}
                </dd>
              </div>
            )}
            {user.ceo && (
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">CEO</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  {typeof user.ceo === 'string' ? user.ceo : user.ceo.email}
                </dd>
              </div>
            )}
          </dl>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex">
              <div className="flex-shrink-0 flex items-center">
                <img className="h-8 w-auto" src="/images/logo.png" alt="Your Company" />
              </div>
            </div>
            <div className="flex items-center">
              <span className="text-gray-700 mr-4">Welcome, {user.email}</span>
              <Button onClick={onSignOut}>Sign Out</Button>
            </div>
          </div>
        </div>
      </nav>

      <div className="py-10">
        <header>
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <h1 className="text-3xl font-bold leading-tight text-gray-900">Dashboard</h1>
          </div>
        </header>
        <main>
          <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div className="px-4 py-8 sm:px-0">
              {renderUserInfo()}
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}
│   │   │   ├── ScheduleViewer.tsx
import { Table } from "./ui/table"

const mockScheduleData = [
  { time: '09:00 AM - 10:30 AM', task: 'Team Meeting' },
  { time: '11:00 AM - 12:30 PM', task: 'Project Work' },
  { time: '02:00 PM - 03:30 PM', task: 'Client Call' },
  { time: '04:00 PM - 05:00 PM', task: 'Documentation' },
]

export default function ScheduleViewer() {
  return (
    <Table
      headers={['Time', 'Task']}
      rows={mockScheduleData.map(item => [item.time, item.task])}
    />
  )
}
│   │   │   ├── SignIn.tsx
import React, { useState } from 'react';
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";

interface SignInProps {
  onSignIn: (email: string, password: string) => Promise<void>;
}

export default function SignIn({ onSignIn }: SignInProps) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    if (!email || !password) {
      setError('Email and password are required');
      return;
    }

    try {
      await onSignIn(email, password);
    } catch (error) {
      setError('An error occurred. Please try again.');
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="px-8 py-6 mt-4 text-left bg-white shadow-lg">
        <h3 className="text-2xl font-bold text-center">Sign in to your account</h3>
        <form onSubmit={handleSubmit}>
          <div className="mt-4">
            <Label htmlFor="email">Email</Label>
            <Input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
              required
            />
          </div>
          <div className="mt-4">
            <Label htmlFor="password">Password</Label>
            <Input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
              required
            />
          </div>
          <div className="flex items-baseline justify-between">
            <Button type="submit" className="px-6 py-2 mt-4 text-white bg-blue-600 rounded-lg hover:bg-blue-900">Sign In</Button>
          </div>
        </form>
        {error && <p className="mt-4 text-xs text-red-500">{error}</p>}
      </div>
    </div>
  );
}
│   │   │   ├── TimeOffRequest.tsx
import { useState } from 'react'
import { Button } from "./ui/button"
import { Input } from "./ui/input"
import { Label } from "./ui/label"
import { Select } from "./ui/select"

export default function TimeOffRequest() {
  const [startDate, setStartDate] = useState('')
  const [endDate, setEndDate] = useState('')
  const [reason, setReason] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    console.log('Time off request submitted:', { startDate, endDate, reason })
  }

  const reasonOptions = [
    { value: "vacation", label: "Vacation" },
    { value: "sick", label: "Sick Leave" },
    { value: "personal", label: "Personal" },
    { value: "other", label: "Other" },
  ]

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <Label htmlFor="start-date">Start Date</Label>
        <Input
          id="start-date"
          type="date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          required
        />
      </div>
      <div>
        <Label htmlFor="end-date">End Date</Label>
        <Input
          id="end-date"
          type="date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          required
        />
      </div>
      <div>
        <Label htmlFor="reason">Reason</Label>
        <Select
          options={reasonOptions}
          value={reason}
          onChange={setReason}
          placeholder="Select reason"
        />
      </div>
      <Button type="submit">Submit Request</Button>
    </form>
  )
}
│   │
│   ├── pages
│   │   ├── _app.tsx
import React from 'react'
import type { AppProps } from 'next/app'
import { Toaster } from 'sonner'

import '../styles/globals.css'

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <>
      <Component {...pageProps} />
      <Toaster position="top-center" richColors />
    </>
  )
}

export default MyApp
│   │   ├── home.tsx
import React, { useState, useEffect } from 'react';
import SignIn from '../components/SignIn';
import Dashboard from '../components/Dashboard';

// Define the User interface based on the structure from your Payload CMS
interface User {
  id: string;
  email: string;
  role: string;
  department?: string;
  manager?: string | { id: string; email: string };
  managerLead?: string | { id: string; email: string };
  salesLead?: string | { id: string; email: string };
  ceo?: string | { id: string; email: string };
}

interface DashboardProps {
  user: User;
  onSignOut: () => Promise<void>;
}

interface ManagerInfo {
  id: string;
  email: string;
}

export default function HomePage() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const checkAuth = async () => {
      const result = await window.ipc.invoke('check-auth');
      setIsAuthenticated(result.isAuthenticated);
      setUser(result.user);
    };
    checkAuth();
  }, []);

  const handleSignIn = async (email: string, password: string) => {
    const result = await window.ipc.invoke('sign-in', { email, password });
    if (result.success) {
      setIsAuthenticated(true);
      setUser(result.user);
    } else {
      console.error(result.error);
    }
  };

  const handleSignOut = async () => {
    await window.ipc.invoke('logout');
    setIsAuthenticated(false);
    setUser(null);
  };

  if (!isAuthenticated) {
    return <SignIn onSignIn={handleSignIn} />;
  }

  return user ? <Dashboard user={user} onSignOut={handleSignOut} /> : null;
}
│   │   ├── next.tsx
import Image from 'next/image'
import Link from 'next/link'
import { Button } from "./../components/ui/button"
import { Clock, Calendar, UserCheck, FileText } from 'lucide-react'

const features = [
  {
    name: 'Clock In/Out',
    Icon: Clock,
    description: 'Easily record your daily attendance with our simple clock in/out system.',
  },
  {
    name: 'View Schedule',
    Icon: Calendar,
    description: 'Check your work schedule and plan your week efficiently.',
  },
  {
    name: 'Attendance History',
    Icon: UserCheck,
    description: 'Review your past attendance records and track your performance.',
  },
  {
    name: 'Request Time Off',
    Icon: FileText,
    description: 'Submit and manage your time off requests seamlessly.',
  },
]

export default function HomePage() {
  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className='py-20 mx-auto text-center flex flex-col items-center max-w-3xl'>
          <Image
            src="/images/logo.png"
            alt="PAR Solution Logo"
            width={200}
            height={67}
            className="mb-8 dark:invert"
          />
          <h1 className='text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-6xl'>
            Welcome to {' '}
            <span className='text-blue-600 dark:text-blue-400'>
              PAR Solution
            </span>
            {' '}Attendance Tracker
          </h1>
          <p className='mt-6 text-lg max-w-prose text-muted-foreground dark:text-gray-300'>
            Manage your attendance, view schedules, and access important work information all in one place. Designed exclusively for PAR Solution employees.
          </p>
          <div className='flex flex-col sm:flex-row gap-4 mt-6'>
            <Link href='/dashboard'>
              <Button size="lg" className="w-full sm:w-auto">Employee Dashboard</Button>
            </Link>
            <Button variant='outline' size="lg" className="w-full sm:w-auto">
              View Attendance Policy
            </Button>
          </div>
        </div>
      </div>

      <section className='border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800'>
        <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20'>
          <div className='grid grid-cols-1 gap-y-12 sm:grid-cols-2 sm:gap-x-6 lg:grid-cols-4 lg:gap-x-8 lg:gap-y-0'>
            {features.map((feature) => (
              <div
                key={feature.name}
                className='text-center md:flex md:items-start md:text-left lg:block lg:text-center'>
                <div className='md:flex-shrink-0 flex justify-center'>
                  <div className='h-16 w-16 flex items-center justify-center rounded-full bg-blue-100 dark:bg-blue-900 text-blue-900 dark:text-blue-100'>
                    <feature.Icon className='w-1/3 h-1/3' />
                  </div>
                </div>

                <div className='mt-6 md:ml-4 md:mt-0 lg:ml-0 lg:mt-6'>
                  <h3 className='text-base font-medium text-gray-900 dark:text-white'>
                    {feature.name}
                  </h3>
                  <p className='mt-3 text-sm text-muted-foreground dark:text-gray-400'>
                    {feature.description}
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>
    </div>
  )
}
│
├── public
│
├── styles
│   ├── globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gray-900 text-blue-950;
  }
}

@layer components {
  .btn-blue {
    @apply text-white font-bold px-4 py-2 rounded bg-blue-600 hover:bg-blue-500;
  }
}

│
├── utils
│   ├── offlineQueue.ts
nothing
│   ├── sync.ts
│nothing
├── next-env.d.ts
├── next.config.js
/** @type {import('next').NextConfig} */
module.exports = {
  output: 'export',
  distDir: process.env.NODE_ENV === 'production' ? '../app' : '.next',
  trailingSlash: true,
  images: {
    unoptimized: true,
  },
  webpack: (config) => {
    return config
  },
}

├── postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {
      config: './renderer/tailwind.config.js',
    },
    autoprefixer: {},
  },
}

├── preload.d.ts
import { IpcHandler } from '../main/preload'

declare global {
  interface Window {
    ipc: IpcHandler
  }
}

├── tailwind.config.js
const colors = require('tailwindcss/colors')

module.exports = {
  content: [
    './renderer/pages/**/*.{js,ts,jsx,tsx}',
    './renderer/components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    colors: {
      // use colors only specified
      white: colors.white,
      gray: colors.gray,
      blue: colors.blue,
    },
    extend: {},
  },
  plugins: [],
}

├── tsconfig.json
{
  "extends": "../tsconfig.json",
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

│
├── resources
│   ├── icon.icns
│   ├── icon.ico
│
├── .gitattributes
├── .gitignore
├── electron-builder.yml
appId: com.example.nextron
productName: Attendance App
copyright: Copyright © 2024 S R Jay
directories:
  output: dist
  buildResources: resources
files:
  - from: .
    filter:
      - package.json
      - app
publish: null
extraMetadata:
  main: app/background.js
├── package-lock.json
├── package.json
{
  "private": true,
  "name": "par-attendance-app",
  "description": "PAR Solution Attendance Tracker",
  "version": "1.0.0",
  "author": "S R Jay Kikani <srjaykikani@gmail.com>",
  "main": "app/background.js",
  "scripts": {
    "dev": "nextron",
    "build": "nextron build",
    "postinstall": "electron-builder install-app-deps"
  },
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "axios": "^1.7.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "electron-serve": "^1.3.0",
    "electron-store": "^8.2.0",
    "lucide-react": "^0.439.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2"
  },
  "devDependencies": {
    "@types/electron-store": "^3.2.0",
    "@types/node": "^20.11.16",
    "@types/react": "^18.2.52",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.19",
    "electron": "^32.0.2",
    "electron-builder": "^24.13.3",
    "next": "^14.2.4",
    "nextron": "^9.1.0",
    "postcss": "^8.4.38",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.4.5"
  }
}

├── README.md
├── tsconfig.json
{
  "compilerOptions": {
    "target": "ES2018",
    "module": "commonjs",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"],
  "exclude": ["node_modules", "renderer/next.config.js", "app", "dist"]
}
├── yarn.lock


// main/rabbitmq.ts
import amqp from 'amqplib';

const RABBITMQ_URL = process.env.RABBITMQ_URL || 'amqp://localhost';
const QUEUE_NAME = 'attendance_updates';

let channel: amqp.Channel | null = null;

export async function initializeRabbitMQ() {
  try {
    const connection = await amqp.connect(RABBITMQ_URL);
    channel = await connection.createChannel();
    await channel.assertQueue(QUEUE_NAME, { durable: true });
    console.log('RabbitMQ connection established');
  } catch (error) {
    console.error('Failed to connect to RabbitMQ:', error);
  }
}

export async function sendAttendanceUpdate(userId: string, data: any) {
  if (!channel) {
    console.error('RabbitMQ channel not initialized');
    return;
  }

  try {
    const message = JSON.stringify({ userId, data });
    channel.sendToQueue(QUEUE_NAME, Buffer.from(message));
  } catch (error) {
    console.error('Failed to send message to RabbitMQ:', error);
  }
}